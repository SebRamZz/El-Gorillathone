import { tool } from '@langchain/core/tools';
import { z } from 'zod';
import { GoogleGenAI } from '@google/genai';
import { createWriteStream, createReadStream, existsSync, mkdirSync } from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import FormData from 'form-data';

export const geminiVeoVideoTool = tool(
  async ({ prompt, model, aspectRatio, personGeneration, numberOfVideos, durationSeconds, userToken }) => {
    if (!process.env.GOOGLE_API_KEY) {
      throw new Error('‚ùå GOOGLE_API_KEY n‚Äôest pas d√©finie dans les variables d‚Äôenvironnement.');
    }

    const ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_API_KEY });

    try {
      // G√©n√©ration de la vid√©o avec Gemini Veo
      let operation = await ai.models.generateVideos({
        model,
        prompt,
        config: {
          personGeneration,
          aspectRatio: aspectRatio ?? '16:9',
          numberOfVideos: numberOfVideos ?? 1,
          durationSeconds: durationSeconds ?? 8,
        },
      });

      while (!operation.done) {
        await new Promise((res) => setTimeout(res, 10000));
        operation = await ai.operations.getVideosOperation({ operation });
      }

      const results = operation.response?.generatedVideos ?? [];
      if (results.length === 0) return '‚ùå Aucune vid√©o g√©n√©r√©e.';

      const videoUrl = `${results[0].video?.uri}&key=${process.env.GOOGLE_API_KEY}`;

      // Assurer que le dossier /uploads existe
      const uploadsDir = path.resolve('uploads');
      if (!existsSync(uploadsDir)) {
        mkdirSync(uploadsDir);
      }

      const outputPath = path.resolve(uploadsDir, `generated_video_${Date.now()}.mp4`);

      console.log('üü¢ T√©l√©chargement de la vid√©o depuis:', videoUrl);

      // T√©l√©chargement de la vid√©o
      const resp = await fetch(videoUrl);
      if (!resp.ok) throw new Error(`‚ùå √âchec du t√©l√©chargement : ${resp.statusText}`);
      if (!resp.body) throw new Error('‚ùå R√©ponse vide lors du t√©l√©chargement.');

      const writer = createWriteStream(outputPath);
      await new Promise<void>((resolve, reject) => {
        resp.body!.pipe(writer);
        writer.on('finish', resolve);
        writer.on('error', reject);
      });

      console.log('üìÅ Vid√©o enregistr√©e dans :', outputPath);

      // Envoi au backend
      const form = new FormData();
      form.append('file', createReadStream(outputPath));
      form.append('userId', userToken);

      const backendResponse = await fetch('http://hackaton-backend:3000/api/v1/videos/upload', {
        method: 'POST',
        body: form,
        headers: {
          Authorization: `Bearer ${userToken}`,
          ...form.getHeaders(),
        },
      });

      if (!backendResponse.ok) {
        throw new Error(`‚ùå Upload backend √©chou√© : ${backendResponse.statusText}`);
      }

      return outputPath;
    } catch (err) {
      console.error('‚ùå Erreur lors de la g√©n√©ration vid√©o :', err);
      return '‚ùå Erreur pendant la g√©n√©ration de la vid√©o.';
    }
  },
  {
    name: 'gemini-veo-video-generator',
    description:
      "G√©n√®re une vid√©o √† partir d'un prompt texte avec le mod√®le Gemini Veo (2 ou 3) de Google.",
    schema: z.object({
      prompt: z
        .string()
        .describe("Prompt d√©crivant la sc√®ne ou le contenu de la vid√©o (ex: 'Un coucher de soleil sur une plage tropicale')."),
      model: z
        .enum(['veo-2.0-generate-001', 'veo-3.0-generate-preview'])
        .optional()
        .default('veo-2.0-generate-001')
        .describe('Version du mod√®le Gemini Veo √† utiliser.'),
      aspectRatio: z
        .enum(['16:9', '9:16'])
        .optional()
        .default('16:9')
        .describe('Format de la vid√©o √† g√©n√©rer.'),
      personGeneration: z
        .enum(['dont_allow'])
        .optional()
        .default('dont_allow')
        .describe("Autoriser ou non la g√©n√©ration de personnes (obligatoirement 'dont_allow' en UE)."),
      numberOfVideos: z
        .number()
        .int()
        .min(1)
        .max(1)
        .optional()
        .default(1)
        .describe('Nombre de vid√©os √† g√©n√©rer (max 1 pour le moment).'),
      durationSeconds: z
        .number()
        .min(5)
        .max(8)
        .optional()
        .default(8)
        .describe('Dur√©e de la vid√©o (5 √† 8 secondes).'),
      userToken: z
        .string()
        .min(10, "Le token est trop court")
        .describe("Token d'authentification de l'utilisateur qui g√©n√®re la vid√©o."),
    }),
  }
);
